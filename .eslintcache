[{"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/index.tsx":"1","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/reportWebVitals.ts":"2","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/App.tsx":"3","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/api/GraphService.ts":"4","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/ModalView.tsx":"5","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/api/axios.ts":"6","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/env/Environments.ts":"7","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/pipeline/Pipelines.tsx":"8","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/pipeline/PipelinesDetail.tsx":"9","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/Graph.tsx":"10","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/pipeline/PipelineEdit.tsx":"11","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/pipeline/PipelineRow.tsx":"12","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/D3Helper.ts":"13","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/RelationEdit.tsx":"14","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/NodeEdit.tsx":"15","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/FromStyle.tsx":"16","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/domain/DomainList.tsx":"17","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/sources/UploadSource.tsx":"18","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/sources/SourceSelect.tsx":"19","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/DomainSelect.tsx":"20","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/PropertyEdit.tsx":"21","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/domain/DomainListEntry.tsx":"22","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/color/ColorPicker.tsx":"23","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/domain/NodeSelect.tsx":"24","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/navigation/Navigation.tsx":"25","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/general/OpenSelect.tsx":"26"},{"size":782,"mtime":1620369077480,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1620369077482,"results":"29","hashOfConfig":"28"},{"size":874,"mtime":1621494591507,"results":"30","hashOfConfig":"28"},{"size":3475,"mtime":1622187665128,"results":"31","hashOfConfig":"28"},{"size":1230,"mtime":1621494591508,"results":"32","hashOfConfig":"28"},{"size":188,"mtime":1620369077477,"results":"33","hashOfConfig":"28"},{"size":74,"mtime":1620369077478,"results":"34","hashOfConfig":"28"},{"size":2266,"mtime":1622187665131,"results":"35","hashOfConfig":"28"},{"size":942,"mtime":1622205544751,"results":"36","hashOfConfig":"28"},{"size":16674,"mtime":1621494591511,"results":"37","hashOfConfig":"28"},{"size":4973,"mtime":1622205544751,"results":"38","hashOfConfig":"28"},{"size":1990,"mtime":1621494591513,"results":"39","hashOfConfig":"28"},{"size":2748,"mtime":1621494591510,"results":"40","hashOfConfig":"28"},{"size":5691,"mtime":1621494591512,"results":"41","hashOfConfig":"28"},{"size":5353,"mtime":1621494591511,"results":"42","hashOfConfig":"28"},{"size":845,"mtime":1621494591510,"results":"43","hashOfConfig":"28"},{"size":1489,"mtime":1621494591509,"results":"44","hashOfConfig":"28"},{"size":2441,"mtime":1621494591514,"results":"45","hashOfConfig":"28"},{"size":684,"mtime":1622187665132,"results":"46","hashOfConfig":"28"},{"size":1565,"mtime":1621494591510,"results":"47","hashOfConfig":"28"},{"size":2835,"mtime":1621494591511,"results":"48","hashOfConfig":"28"},{"size":2960,"mtime":1621494591509,"results":"49","hashOfConfig":"28"},{"size":1324,"mtime":1621494591508,"results":"50","hashOfConfig":"28"},{"size":1379,"mtime":1621494591509,"results":"51","hashOfConfig":"28"},{"size":2403,"mtime":1621494591512,"results":"52","hashOfConfig":"28"},{"size":1954,"mtime":1622205544750,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1ybz53b",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/index.tsx",[],["114","115"],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/reportWebVitals.ts",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/App.tsx",["116"],"import React from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { Graph } from \"./components/graph/Graph\";\nimport { Pipelines } from \"./components/pipeline/Pipelines\";\nimport { PipelinesDetail } from \"./components/pipeline/PipelinesDetail\";\nimport { Navigation } from \"./components/navigation/Navigation\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/\" exact={true} component={Graph} />\n          <Route path=\"/pipelines\" component={Pipelines} />\n          <Route path=\"/pipeline/:id\" component={PipelinesDetail} />\n        </Switch>\n      </div>\n      <Navigation></Navigation>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/api/GraphService.ts",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/ModalView.tsx",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/api/axios.ts",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/env/Environments.ts",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/pipeline/Pipelines.tsx",["117","118","119","120","121","122","123","124"],"import { useEffect, useState } from \"react\";\nimport { Domain } from \"../../api/model/Model\";\nimport graphService from \"../../api/GraphService\";\nimport {\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { PipelineRow } from \"./PipelineRow\";\n\nexport const Pipelines = () => {\n  const classes = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n  })();\n\n  const history = useHistory();\n  const [domains, setDomains] = useState<Domain[]>();\n\n  const [process, setProcess] = useState({});\n  const [message, setMessage] = useState();\n  const [listening, setListening] = useState(false);\n\n  const statusMessage = {\n    subscribed: \"Subscribed\",\n    unsubscribed: \"Unsubscribed\",\n  };\n\n  useEffect(() => {\n    graphService.domainsGet().then((domains) => setDomains(domains));\n  }, []);\n\n  function subscribe(domainId: string) {\n    console.log(\"start import\");\n    let sseClient = new EventSource(\n      \"http://localhost:8081/graph/domain/\" + domainId + \"/stats\"\n    );\n    sseClient.onmessage = function (e) {\n      setMessage(e.data);\n    };\n\n    //sseClient.onmessage = onMessageHandler\n    sseClient.onerror = function (event) {\n      if (sseClient.readyState === EventSource.CLOSED) {\n        console.log(\"SSE closed \");\n        sseClient.close();\n      } else if (sseClient.readyState === EventSource.CONNECTING) {\n        console.log(\"SSE reconnecting \");\n        sseClient.close();\n      }\n    };\n  }\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow key=\"table-header\">\n              <TableCell>Name</TableCell>\n              <TableCell>Model Valid</TableCell>\n              <TableCell>Mapping Valid</TableCell>\n              <TableCell>Play</TableCell>\n              <TableCell>Counter</TableCell>\n              <TableCell align=\"right\">ID</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {domains?.map((row) => (\n              <PipelineRow domain={row} />\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/pipeline/PipelinesDetail.tsx",["125","126"],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/Graph.tsx",["127","128","129","130","131","132","133","134","135","136"],"import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { NodeEdit } from \"./NodeEdit\";\nimport { IconButton } from \"@material-ui/core\";\nimport CloudUpload from \"@material-ui/icons/CloudUpload\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport RotateRightIcon from \"@material-ui/icons/RotateRight\";\nimport { Domain, GraphDelta, Node, Relation } from \"../../api/model/Model\";\nimport { useStyles } from \"./FromStyle\";\nimport { RelationEdit } from \"./RelationEdit\";\nimport graphService from \"../../api/GraphService\";\nimport { DomainList } from \"../domain/DomainList\";\nimport { ModalView } from \"../../components/ModalView\";\nimport { UploadSource } from \"../sources/UploadSource\";\nimport { D3Helper } from \"./D3Helper\";\nimport { useHistory } from \"react-router-dom\";\n\nexport interface D3Node extends d3.SimulationNodeDatum {\n  kind: string;\n  node: Node;\n}\n\nexport interface D3Relation extends d3.SimulationLinkDatum<D3Node> {\n  kind: string;\n  relation: Relation;\n  color?: string;\n  relCount: number;\n  relIndex: number;\n  incomingRelationsCount: number;\n  firstRender?: boolean;\n}\n\n/* Component */\nexport const Graph = () => {\n  const [selectedDomain, setSelectedDomain] = useState<Domain>();\n  const [domains, setDomains] = useState<Domain[]>([]);\n  const [nodes, setNodes] = useState<D3Node[]>([]);\n  const [relations, setRelations] = useState<D3Relation[]>([]);\n  const [selected, setSelected] = useState<D3Node | D3Relation>();\n  const [upload, setUpload] = useState(false);\n  const d3Container = useRef(null);\n\n  function updateState(graphDelta: GraphDelta) {\n    setDomains(\n      domains.filter(\n        (d) => !graphDelta.removedDomains.some((id) => id === d.id)\n      )\n    );\n    updateNodes(graphDelta);\n    updateRelations(graphDelta);\n  }\n\n  function updateNodes(graphDelta: GraphDelta) {\n    let d3Nodes = nodes.filter(\n      (n) => !graphDelta.removedNodes.some((id) => id === n.node.id)\n    );\n    graphDelta.changedNodes?.forEach((cn) => {\n      if (d3Nodes.some((n) => n.node.id === cn.id)) {\n        d3Nodes\n          .filter((n) => n.node.id === cn.id)\n          .forEach((n) => (n.node = cn));\n      } else {\n        d3Nodes = d3Nodes.concat(wrapNode(cn));\n      }\n    });\n    setNodes(d3Nodes);\n  }\n\n  function updateRelations(graphDelta: GraphDelta) {\n    let d3Relations = relations.filter(\n      (r) => !graphDelta.removedRelations.some((id) => id === r.relation.id)\n    );\n    graphDelta.changedRelations.forEach((cr) => {\n      if (d3Relations.some((n) => n.relation.id === cr.id)) {\n        d3Relations\n          .filter((n) => n.relation.id === cr.id)\n          .forEach((n) => (n.relation = cr));\n      } else {\n        d3Relations = d3Relations.concat(wrapRelation(cr));\n      }\n    });\n    setRelations(d3Relations);\n  }\n\n  function wrapNode(node: Node): D3Node {\n    return {\n      kind: \"node\",\n      node: node,\n    };\n  }\n\n  function wrapRelation(rel: Relation): D3Relation {\n    return {\n      kind: \"relation\",\n      relation: rel,\n      source: rel.sourceId,\n      target: rel.targetId,\n      relCount: 0,\n      incomingRelationsCount: 0,\n      relIndex: 0,\n    };\n  }\n\n  function color(id: string): string {\n    return nodes.find((n) => n.node.id === id)?.node.color ?? \"green\";\n  }\n\n  useEffect(() => {\n    graphService.graphGet().then((g) => {\n      setNodes(g.nodes.map((n) => wrapNode(n)));\n      setRelations(g.relations.map((n) => wrapRelation(n)));\n      setDomains(g.domains);\n    });\n  }, []);\n\n  useEffect(() => {\n    function createRelation(source: D3Node, target: D3Node, domain: Domain) {\n      let rel: Relation = {\n        id: \"\",\n        domainIds: [domain.id],\n        sourceId: source.node.id,\n        targetId: target.node.id,\n        multiple: false,\n        primary: false,\n        type: \"\",\n        color: \"red\",\n      };\n      let d3Relation = wrapRelation(rel);\n      setSelected(d3Relation);\n    }\n\n    function nodeRadius(n: D3Node): number {\n      let isSelected =\n        selected && \"node\" in selected && selected.node.id === n.node.id;\n      if (isSelected) {\n        return 40;\n      } else if (n.node.domainIds.some((id) => id === selectedDomain?.id)) {\n        return 30;\n      }\n      return 20;\n    }\n\n    function relWidth(rel: D3Relation): number {\n      let isSelected =\n        selected &&\n        \"relation\" in selected &&\n        selected.relation.id === rel.relation.id;\n      if (isSelected) {\n        return 18;\n      } else if (\n        rel.relation.domainIds.some((id) => id === selectedDomain?.id)\n      ) {\n        return 12;\n      }\n      return 6;\n    }\n\n    function drawNodes(svg: d3.Selection<null, unknown, null, undefined>) {\n      return svg\n        .append(\"g\")\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"stroke-width\", 1.5)\n        .selectAll(\"circle\")\n        .data(nodes)\n        .join(\"circle\")\n        .attr(\"r\", (n) => nodeRadius(n))\n        .attr(\"fill\", (n) => n.node.color)\n        .classed(\"node\", true);\n    }\n\n    function drawSelectionIndicator(\n      svg: d3.Selection<null, unknown, null, undefined>\n    ) {\n      let selection: d3.Selection<any, any, any, any> | undefined = undefined;\n      if (selected && \"node\" in selected && selected.node.id) {\n        let selectedNode = selected as D3Node;\n        // @ts-ignore\n        selection = svg\n          .append(\"g\")\n          .selectAll(\"path\")\n          .data([selectedNode])\n          .join(\"path\")\n          .attr(\"id\", (d) => d.node.id)\n          .attr(\"stroke-opacity\", 0.7)\n          .attr(\"stroke\", (d) => d.node.color)\n          .attr(\"fill\", (d) => d.node.color)\n          .attr(\"stroke-width\", 20)\n          .classed(\"path\", true);\n      }\n      return selection;\n    }\n\n    function drawRelations(\n      svg: d3.Selection<null, unknown, null, undefined>,\n      relations: D3Relation[]\n    ) {\n      let selection = svg.append(\"g\").selectAll(\"path\").data(relations);\n      let relation = selection\n        .join(\"path\")\n        .attr(\"id\", (d) => d.relation.id)\n        .attr(\"stroke-opacity\", (r) => {\n          if (\n            selected &&\n            \"relation\" in selected &&\n            selected.relation.id === r.relation.id\n          ) {\n            return 1;\n          } else {\n            return 0.6;\n          }\n        })\n        .attr(\"stroke\", (d) => color(d.relation.sourceId))\n        .attr(\"fill\", \"transparent\")\n        .attr(\"stroke-width\", (rel) => relWidth(rel))\n        .classed(\"path\", true);\n\n      // @ts-ignore\n      selection\n        .join(\"text\")\n        .append(\"textPath\")\n        .attr(\"href\", (d) => \"#\" + d.relation.id)\n        .text((d) => d.relation.type)\n        .attr(\"dominant-baseline\", \"middle\")\n        .attr(\"startOffset\", \"50%\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"class\", \"relation-label\");\n      return relation;\n    }\n\n    function drawNodeLabel(svg: d3.Selection<null, unknown, null, undefined>) {\n      return svg\n        .append(\"g\")\n        .selectAll(\"text\")\n        .data(nodes)\n        .join(\"text\")\n        .text((d) => d.node.label)\n        .attr(\"dominant-baseline\", \"middle\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"class\", \"node-label\");\n    }\n\n    function nodeMouseEvents(simulation: d3.Simulation<any, any>, node: any) {\n      const dragstart = (event: any, d: any) => {\n        d.fx = d.x;\n        d.fy = d.y;\n      };\n      const dragged = (event: any, d: any) => {\n        d.fx = event.x;\n        d.fy = event.y;\n        simulation.restart();\n      };\n      const draggedend = (event: any, d: any) => {};\n\n      const click = (event: any, d: any) => {\n        if (selected && \"node\" in selected && selected.node.id === d.id) {\n          delete d.fx;\n          delete d.fy;\n          setSelected((x) => undefined);\n        } else {\n          setSelected((x) => d);\n        }\n      };\n\n      const drag = d3\n        .drag()\n        .on(\"start\", dragstart)\n        .on(\"drag\", dragged)\n        .on(\"end\", draggedend);\n      node.call(drag).on(\"click\", click);\n    }\n\n    function relationMouseEvents(\n      simulation: d3.Simulation<any, any>,\n      relation: any\n    ) {\n      const click = (event: any, r: D3Relation) => {\n        if (\n          selected &&\n          \"relation\" in selected &&\n          selected.relation.id === r.relation.id\n        ) {\n          setSelected(undefined);\n        } else {\n          setSelected(r);\n        }\n      };\n      relation.on(\"click\", click);\n    }\n\n    function relationDrawEvents(\n      simulation: d3.Simulation<any, any>,\n      selection: any\n    ) {\n      let selectionDrag = d3\n        .drag()\n        .on(\"start\", (e, d: any) => {\n          simulation.restart();\n        })\n        .on(\"drag\", (e: any, d: any) => {\n          if (selected && \"node\" in selected && selected.node.id) {\n            const node: D3Node = selected as D3Node;\n            const nodeX = node.x ?? 0;\n            const nodeY = node.y ?? 0;\n            d.d = D3Helper.selectionPath(\n              nodeX,\n              nodeY,\n              e.x - nodeX,\n              e.y - nodeY\n            );\n          }\n          simulation.restart();\n        })\n        .on(\"end\", (e, d: any) => {\n          delete d.d;\n          let target = nodes.filter((n) => {\n            // @ts-ignore\n            let hyp = D3Helper.pointDistance(n, e);\n            return hyp < 20;\n          })[0];\n          if (selected?.kind === \"node\" && target && selectedDomain) {\n            const source = selected as D3Node;\n            createRelation(source, target, selectedDomain);\n          }\n          simulation.restart();\n        });\n      if (selection) {\n        selection.call(selectionDrag);\n      }\n    }\n\n    function buildSimulation(relations: D3Relation[], tick: () => void) {\n      return d3\n        .forceSimulation()\n        .alpha(0.05)\n        .nodes(nodes)\n        .force(\"charge\", d3.forceManyBody().strength(-0.1))\n        .force(\n          \"link\",\n          d3\n            .forceLink<D3Node, D3Relation>(relations)\n            .id((d) => d.node.id)\n            .distance(100)\n            .strength(0.9)\n        )\n        .force(\"collision\", d3.forceCollide().radius(70).strength(0.3))\n        .force(\"x\", d3.forceX().strength(0.5))\n        .force(\"y\", d3.forceY().strength(0.5))\n        .on(\"tick\", tick);\n    }\n\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n\n    if (d3Container.current && nodes) {\n      const svg = d3.select(d3Container.current);\n      svg.selectAll(\"*\").remove();\n      svg.append(\"style\").text(`\n            .relation-label { font: bold 13px sans-serif; fill: white; text-shadow: 2px 2px 2px black; }\n            .node-label { font: bold 13px sans-serif; fill: white; text-shadow: 2px 2px 6px black; }\n          `);\n      var rels: D3Relation[];\n      if (selected && \"relation\" in selected && selected.relation.id === \"\") {\n        console.log(\"add selected to relations\");\n        rels = relations.concat(selected);\n      } else {\n        rels = relations;\n      }\n\n      rels.forEach((r) => (r.incomingRelationsCount = 0));\n\n      rels.forEach((r) => {\n        r.incomingRelationsCount = rels.filter(\n          (r2) =>\n            r2.relation.targetId === r.relation.sourceId &&\n            r2.relation.sourceId === r.relation.targetId\n        ).length;\n      });\n\n      rels.forEach((r) => {\n        r.relCount = rels.filter(\n          (r2) =>\n            r2.relation.sourceId === r.relation.sourceId &&\n            r2.relation.targetId === r.relation.targetId\n        ).length;\n\n        r.relIndex = rels\n          .filter(\n            (r2) =>\n              r2.relation.sourceId === r.relation.sourceId &&\n              r2.relation.targetId === r.relation.targetId\n          )\n          .indexOf(r);\n\n        r.firstRender = r.relation.sourceId > r.relation.targetId;\n      });\n\n      svg.attr(\n        \"viewBox\",\n        \"\" + -width / 2 + \",\" + -height / 2 + \",\" + width + \",\" + height\n      );\n      const relation = drawRelations(svg, rels);\n      const selection = drawSelectionIndicator(svg);\n      const node = drawNodes(svg);\n      const text = drawNodeLabel(svg);\n\n      const tick = () => {\n        if (selection && selected) {\n          // @ts-ignore\n          selection\n            // @ts-ignore\n            .attr(\"d\", (d) => {\n              if (d.d) {\n                // @ts-ignore\n                return d.d;\n              } else {\n                return D3Helper.selectionPath(\n                  // @ts-ignore\n                  selected.x,\n                  // @ts-ignore\n                  selected.y,\n                  // @ts-ignore\n                  selected.x,\n                  // @ts-ignore\n                  selected.y\n                );\n              }\n            });\n        }\n\n        // @ts-ignore\n        node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n        // @ts-ignore\n        text.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\n        relation\n          // @ts-ignorex\n          .attr(\"d\", (rel) => {\n            return D3Helper.buildRelationPath(rel);\n          });\n      };\n\n      const simulation = buildSimulation(rels, tick);\n      nodeMouseEvents(simulation, node);\n      relationDrawEvents(simulation, selection);\n      relationMouseEvents(simulation, relation);\n    }\n  }, [selectedDomain, domains, selected, nodes, relations]);\n\n  function editSection() {\n    if (selected?.kind === \"node\") {\n      return (\n        <NodeEdit\n          domains={domains}\n          node={(selected as D3Node).node}\n          nodes={nodes.map((n) => n.node)}\n          onCreate={(n) => {\n            graphService.nodePost(n).then((node) => {\n              let d3Node = wrapNode(node);\n              setNodes(nodes.concat(d3Node));\n              setSelected(d3Node);\n            });\n          }}\n          onSubmit={(n) => {\n            graphService.nodePut(n).then((graphDelta) => {\n              updateState(graphDelta);\n              setSelected(nodes.filter((node) => node.node.id === n.id)[0]);\n            });\n          }}\n          onDelete={(deleted) => {\n            graphService.nodeDelete(deleted.id).then((graphDelta) => {\n              updateState(graphDelta);\n              setSelected(undefined);\n            });\n          }}\n          onClose={() => setSelected(undefined)}\n        />\n      );\n    } else if (selected?.kind === \"relation\") {\n      return (\n        <RelationEdit\n          domains={domains}\n          relation={(selected as D3Relation).relation}\n          nodes={nodes.map((n) => n.node)}\n          onCreate={(rel) => {\n            graphService.relationPost(rel).then((graphDelta) => {\n              updateState(graphDelta);\n              setSelected(\n                relations.filter(\n                  (r) => r.relation.id === graphDelta.changedRelations[0].id\n                )[0]\n              );\n            });\n          }}\n          onSubmit={(rel) => {\n            graphService.relationPut(rel).then((graphDelta) => {\n              updateState(graphDelta);\n              setSelected(relations.filter((r) => r.relation.id === rel.id)[0]);\n            });\n          }}\n          onDelete={(rel) => {\n            graphService.relationDelete(rel.id).then((graphDelta) => {\n              updateState(graphDelta);\n              setSelected(undefined);\n            });\n          }}\n          onClose={() => setSelected(undefined)}\n        />\n      );\n    }\n  }\n\n  const classes = useStyles();\n\n  function domainList() {\n    return (\n      <DomainList\n        domains={domains}\n        nodes={nodes.map((n) => n.node)}\n        selectedDomain={selectedDomain}\n        onSubmit={(domain) => {\n          setDomains(domains.filter((d) => d.id !== domain.id).concat(domain));\n          setSelectedDomain(domain);\n        }}\n        onCreate={(domain) => {\n          setDomains(domains.concat(domain));\n          setSelectedDomain(domain);\n        }}\n        onSelect={(domain: Domain) => {\n          if (selectedDomain?.id === domain.id) {\n            setSelectedDomain(undefined);\n          } else {\n            setSelectedDomain(domain);\n          }\n        }}\n        onDelete={(graphDelta) => {\n          updateState(graphDelta);\n          setSelected(undefined);\n        }}\n        addNode={(domain: Domain) => {\n          setSelected(\n            wrapNode({\n              id: \"\",\n              domainIds: [domain!.id],\n              color: \"blue\",\n              label: \"\",\n            })\n          );\n          setSelectedDomain(domain);\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      {domainList()}\n\n      <div className={classes.overlay}>{editSection()}</div>\n      <svg\n        className={classes.svg}\n        width={window.innerWidth}\n        height={window.innerHeight}\n        ref={d3Container}\n      />\n    </>\n  );\n};\n","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/pipeline/PipelineEdit.tsx",["137"],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/pipeline/PipelineRow.tsx",["138","139","140","141","142","143","144"],"import { useEffect, useState } from \"react\";\nimport { Domain } from \"../../api/model/Model\";\nimport graphService from \"../../api/GraphService\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport DoneOutlineIcon from \"@material-ui/icons/DoneOutline\";\nimport { IconButton, makeStyles, TableCell, TableRow } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const PipelineRow = (props: { domain: Domain }) => {\n  const history = useHistory();\n\n  const classes = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n  })();\n\n  const [process, setProcess] = useState({});\n  const [message, setMessage] = useState();\n  const [listening, setListening] = useState(false);\n\n  const statusMessage = {\n    subscribed: \"Subscribed\",\n    unsubscribed: \"Unsubscribed\",\n  };\n\n  useEffect(() => {\n    let sseClient = new EventSource(\n      \"http://localhost:8081/graph/domain/\" + props.domain.id + \"/stats\"\n    );\n    sseClient.onmessage = function (e) {\n      setMessage(e.data);\n    };\n  }, []);\n\n  function valid(valid: boolean) {\n    if (valid) {\n      return <DoneOutlineIcon />;\n    } else {\n      return <WarningIcon />;\n    }\n  }\n\n  return (\n    <TableRow\n      key={props.domain.id}\n      onClick={() => history.push(\"/pipeline/\" + props.domain.id)}\n    >\n      <TableCell component=\"th\" scope=\"row\">\n        {props.domain.name}\n      </TableCell>\n      <TableCell align=\"left\">{valid(props.domain.modelValid)}</TableCell>\n      <TableCell align=\"left\">{valid(props.domain.mappingValid)}</TableCell>\n      <TableCell align=\"left\">\n        <IconButton\n          onClick={(e) => {\n            graphService.domainImport(props.domain.id);\n            e.stopPropagation();\n          }}\n        >\n          <PlayArrowIcon />\n        </IconButton>\n      </TableCell>\n      <TableCell align=\"left\">{message}</TableCell>\n      <TableCell align=\"right\">{props.domain.id}</TableCell>\n    </TableRow>\n  );\n};\n","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/D3Helper.ts",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/RelationEdit.tsx",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/NodeEdit.tsx",["145"],"import React, { useEffect, useRef, useState } from \"react\";\n\nimport {\n  Button,\n  Divider,\n  FormControlLabel,\n  FormGroup,\n  IconButton,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\n\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { Domain, Node, Property } from \"../../api/model/Model\";\nimport { PropertyEdit } from \"./PropertyEdit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { DomainSelect } from \"./DomainSelect\";\nimport { ColorPicker } from \"../color/ColorPicker\";\n\ninterface NodeEditProps {\n  node: Node;\n  nodes: Node[];\n  domains: Domain[];\n  onCreate: (node: Node) => void;\n  onSubmit: (node: Node) => void;\n  onDelete: (node: Node) => void;\n  onClose: () => void;\n}\n\nvar ID = function () {\n  return \"_\" + Math.random().toString(36).substr(2, 9);\n};\n\nexport const NodeEdit = (props: NodeEditProps) => {\n  const [value, setValue] = useState<Node>(Object.create(props.node));\n\n  const useStyle = makeStyles({\n    root: {\n      display: \"flex\",\n      maxHeight: \"95vh\",\n      flex: \"auto\",\n      flexDirection: \"column\",\n      maxWidth: 350,\n    },\n    header: {\n      flexGrow: 0,\n      borderBottom: \"2px solid gray\",\n      marginBottom: 4,\n    },\n    content: {\n      overflowY: \"auto\",\n      alignItems: \"stretch\",\n      flexGrow: 1,\n    },\n    footer: {\n      flexGrow: 0,\n      borderTop: \"2px solid gray\",\n    },\n    label: {\n      marginLeft: 10,\n      width: \"100%\",\n    },\n    edit: {\n      width: \"100%\",\n    },\n  });\n  const classes = useStyle();\n\n  const updateLabel = (event: any) => {\n    setValue((node) => ({ ...node, label: event.target.value }));\n  };\n  const updateColor = (hex: any) => {\n    setValue((node) => ({ ...node, color: hex }));\n  };\n  const updateDomain = (newDomainIds: string[]) => {\n    setValue((node) => ({ ...node, domainIds: newDomainIds }));\n  };\n  const updateDomainEntry = (event: any, value: boolean) => {\n    setValue((node) => ({ ...node, root: value }));\n  };\n\n  function addProperty() {\n    setValue((value) => ({\n      ...value,\n      properties: (value.properties ?? []).concat({\n        id: ID(),\n        type: \"string\",\n        name: \"\",\n        primary: false,\n      }),\n    }));\n  }\n\n  function deleteProperty(model: Property) {\n    setValue((value) => ({\n      ...value,\n      properties: (value.properties ?? []).filter((p) => p.id !== model.id),\n    }));\n  }\n\n  const updateProperty = (model: Property) => {\n    setValue((value) => {\n      let index = value.properties?.findIndex((p) => p.id === model.id);\n      let properties = value.properties;\n      properties!![index!!] = model;\n      return {\n        ...value,\n        properties: properties,\n      };\n    });\n  };\n\n  function properties() {\n    return (\n      <>\n        <h3>Properties</h3>\n        {value.properties?.map((p) => (\n          <div key={p.id}>\n            <PropertyEdit\n              key={p.id}\n              property={p}\n              onSubmit={updateProperty}\n              onDelete={deleteProperty}\n            />\n            <Divider />\n          </div>\n        ))}\n        <IconButton component=\"span\" color=\"inherit\" onClick={addProperty}>\n          <AddIcon />\n        </IconButton>\n      </>\n    );\n  }\n\n  const handleSubmit = (event: any) => {\n    if (value.id === \"\") {\n      props.onCreate(value);\n    } else {\n      props.onSubmit(value);\n    }\n    event.preventDefault();\n  };\n\n  const labelInput = useRef(null);\n\n  useEffect(() => {\n    setValue(props.node);\n  }, [props]);\n\n  return (\n    <form className={classes.root} onSubmit={handleSubmit}>\n      <div className={classes.header}>\n        <h2>Update Node</h2>\n      </div>\n      <div className={classes.content}>\n        <FormGroup aria-label=\"position\" row>\n          <FormControlLabel\n            className={classes.label}\n            labelPlacement=\"end\"\n            label=\"Label\"\n            control={\n              <>\n                <TextField\n                  className={classes.edit}\n                  autoComplete=\"off\"\n                  id=\"node-label\"\n                  inputRef={labelInput}\n                  value={value.label}\n                  label=\"Label\"\n                  onChange={updateLabel}\n                />\n                <ColorPicker hex={value.color} onChange={updateColor} />\n              </>\n            }\n          />\n\n          <FormControlLabel\n            className={classes.label}\n            labelPlacement=\"end\"\n            label=\"Domain\"\n            control={\n              <DomainSelect\n                className={classes.edit}\n                domains={props.domains}\n                valueDomainIds={value.domainIds}\n                updateDomains={updateDomain}\n              />\n            }\n          />\n          <Divider />\n          {properties()}\n        </FormGroup>\n      </div>\n      <Divider />\n      <div className={classes.footer}>\n        <IconButton onClick={() => props.onDelete(value)}>\n          <DeleteIcon />\n        </IconButton>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          startIcon={<SaveIcon />}\n        >\n          Save\n        </Button>\n        <IconButton onClick={() => props.onClose()}>\n          <CloseIcon />\n        </IconButton>\n      </div>\n    </form>\n  );\n};\n","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/FromStyle.tsx",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/domain/DomainList.tsx",["146"],"import { Domain, GraphDelta, Node } from \"../../api/model/Model\";\nimport { createStyles, IconButton, makeStyles, Theme } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { useState } from \"react\";\nimport { DomainListEntry } from \"./DomainListEntry\";\nimport graphService from \"../../api/GraphService\";\n\ninterface DomainListProps {\n  domains: Domain[];\n  nodes: Node[];\n  selectedDomain?: Domain;\n  onCreate: (d: Domain) => void;\n  onSubmit: (d: Domain) => void;\n  onSelect: (d: Domain) => void;\n  onDelete: (d: GraphDelta) => void;\n  addNode: (d: Domain) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: \"absolute\",\n      top: 85,\n      right: 5,\n      zIndex: 100,\n    },\n  })\n);\n\nexport const DomainList = (props: DomainListProps) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      {props.domains.map((d) => (\n        <DomainListEntry\n          nodes={props.nodes}\n          key={d.id}\n          domain={d}\n          onSelect={props.onSelect}\n          onUpdate={props.onSubmit}\n          onDelete={props.onDelete}\n          addNode={props.addNode}\n          active={d.id === props.selectedDomain?.id}\n        />\n      ))}\n      <IconButton\n        onClick={(e) =>\n          graphService\n            .domainPost({ name: \"new domain\" })\n            .then((d) => props.onCreate(d))\n        }\n      >\n        <AddIcon></AddIcon>\n      </IconButton>\n    </div>\n  );\n};\n","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/sources/UploadSource.tsx",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/sources/SourceSelect.tsx",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/DomainSelect.tsx",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/graph/PropertyEdit.tsx",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/domain/DomainListEntry.tsx",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/color/ColorPicker.tsx",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/domain/NodeSelect.tsx",["147","148","149"],"import { Chip, Input, makeStyles, MenuItem, Select } from \"@material-ui/core\";\nimport { Domain, Node } from \"../../api/model/Model\";\nimport React from \"react\";\n\nexport interface NodeSelectProps {\n  nodes: Node[];\n  nodeId: string;\n  updateNode: (node: Node) => void;\n  className?: string;\n}\n\nconst useStyle = makeStyles({\n  chip: {\n    margin: 2,\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n});\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nexport const NodeSelect = (props: NodeSelectProps) => {\n  const classes = useStyle();\n\n  return (\n    <Select\n      className={props.className}\n      labelId=\"demo-mutiple-chip-label\"\n      id=\"demo-mutiple-chip\"\n      value={props.nodeId}\n      onChange={(e) => {\n        let node = props.nodes.filter(\n          (n) => n.id === (e.target.value as string)\n        )[0];\n        console.log(\"select\");\n        console.log(node.id);\n        console.log(node.label);\n        console.log(\"select end\");\n        props.updateNode(node);\n      }}\n      input={<Input id=\"select-multiple-chip\" />}\n      MenuProps={MenuProps}\n    >\n      {props.nodes.map((n) => (\n        <MenuItem key={n.id} value={n.id}>\n          {n.label}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n","/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/navigation/Navigation.tsx",[],"/Users/nico/Prodyna/NCT/capt-mifune-ui/src/components/general/OpenSelect.tsx",[],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":4,"column":50,"nodeType":"156","messageId":"157","endLine":4,"endColumn":54},{"ruleId":"154","severity":1,"message":"158","line":24,"column":9,"nodeType":"156","messageId":"157","endLine":24,"endColumn":16},{"ruleId":"154","severity":1,"message":"159","line":27,"column":10,"nodeType":"156","messageId":"157","endLine":27,"endColumn":17},{"ruleId":"154","severity":1,"message":"160","line":27,"column":19,"nodeType":"156","messageId":"157","endLine":27,"endColumn":29},{"ruleId":"154","severity":1,"message":"161","line":28,"column":10,"nodeType":"156","messageId":"157","endLine":28,"endColumn":17},{"ruleId":"154","severity":1,"message":"162","line":29,"column":10,"nodeType":"156","messageId":"157","endLine":29,"endColumn":19},{"ruleId":"154","severity":1,"message":"163","line":29,"column":21,"nodeType":"156","messageId":"157","endLine":29,"endColumn":33},{"ruleId":"154","severity":1,"message":"164","line":31,"column":9,"nodeType":"156","messageId":"157","endLine":31,"endColumn":22},{"ruleId":"154","severity":1,"message":"165","line":40,"column":12,"nodeType":"156","messageId":"157","endLine":40,"endColumn":21},{"ruleId":"154","severity":1,"message":"166","line":9,"column":9,"nodeType":"156","messageId":"157","endLine":9,"endColumn":16},{"ruleId":"167","severity":1,"message":"168","line":21,"column":6,"nodeType":"169","endLine":21,"endColumn":8,"suggestions":"170"},{"ruleId":"154","severity":1,"message":"171","line":4,"column":10,"nodeType":"156","messageId":"157","endLine":4,"endColumn":20},{"ruleId":"154","severity":1,"message":"172","line":5,"column":8,"nodeType":"156","messageId":"157","endLine":5,"endColumn":19},{"ruleId":"154","severity":1,"message":"173","line":6,"column":8,"nodeType":"156","messageId":"157","endLine":6,"endColumn":16},{"ruleId":"154","severity":1,"message":"174","line":7,"column":8,"nodeType":"156","messageId":"157","endLine":7,"endColumn":23},{"ruleId":"154","severity":1,"message":"175","line":13,"column":10,"nodeType":"156","messageId":"157","endLine":13,"endColumn":19},{"ruleId":"154","severity":1,"message":"176","line":14,"column":10,"nodeType":"156","messageId":"157","endLine":14,"endColumn":22},{"ruleId":"154","severity":1,"message":"177","line":16,"column":10,"nodeType":"156","messageId":"157","endLine":16,"endColumn":20},{"ruleId":"154","severity":1,"message":"178","line":40,"column":10,"nodeType":"156","messageId":"157","endLine":40,"endColumn":16},{"ruleId":"154","severity":1,"message":"179","line":40,"column":18,"nodeType":"156","messageId":"157","endLine":40,"endColumn":27},{"ruleId":"167","severity":1,"message":"180","line":446,"column":6,"nodeType":"169","endLine":446,"endColumn":59,"suggestions":"181"},{"ruleId":"167","severity":1,"message":"182","line":77,"column":6,"nodeType":"169","endLine":77,"endColumn":20,"suggestions":"183"},{"ruleId":"154","severity":1,"message":"166","line":13,"column":9,"nodeType":"156","messageId":"157","endLine":13,"endColumn":16},{"ruleId":"154","severity":1,"message":"159","line":19,"column":10,"nodeType":"156","messageId":"157","endLine":19,"endColumn":17},{"ruleId":"154","severity":1,"message":"160","line":19,"column":19,"nodeType":"156","messageId":"157","endLine":19,"endColumn":29},{"ruleId":"154","severity":1,"message":"162","line":21,"column":10,"nodeType":"156","messageId":"157","endLine":21,"endColumn":19},{"ruleId":"154","severity":1,"message":"163","line":21,"column":21,"nodeType":"156","messageId":"157","endLine":21,"endColumn":33},{"ruleId":"154","severity":1,"message":"164","line":23,"column":9,"nodeType":"156","messageId":"157","endLine":23,"endColumn":22},{"ruleId":"167","severity":1,"message":"184","line":35,"column":6,"nodeType":"169","endLine":35,"endColumn":8,"suggestions":"185"},{"ruleId":"154","severity":1,"message":"186","line":80,"column":9,"nodeType":"156","messageId":"157","endLine":80,"endColumn":26},{"ruleId":"154","severity":1,"message":"187","line":4,"column":10,"nodeType":"156","messageId":"157","endLine":4,"endColumn":18},{"ruleId":"154","severity":1,"message":"188","line":1,"column":10,"nodeType":"156","messageId":"157","endLine":1,"endColumn":14},{"ruleId":"154","severity":1,"message":"189","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":16},{"ruleId":"154","severity":1,"message":"166","line":35,"column":9,"nodeType":"156","messageId":"157","endLine":35,"endColumn":16},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'process' is assigned a value but never used.","'setProcess' is assigned a value but never used.","'message' is assigned a value but never used.","'listening' is assigned a value but never used.","'setListening' is assigned a value but never used.","'statusMessage' is assigned a value but never used.","'subscribe' is defined but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["192"],"'IconButton' is defined but never used.","'CloudUpload' is defined but never used.","'SaveIcon' is defined but never used.","'RotateRightIcon' is defined but never used.","'ModalView' is defined but never used.","'UploadSource' is defined but never used.","'useHistory' is defined but never used.","'upload' is assigned a value but never used.","'setUpload' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'color'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array. You can also do a functional update 'setValue(v => ...)' if you only need 'value' in the 'setValue' call.",["194"],"React Hook useEffect has a missing dependency: 'props.domain.id'. Either include it or remove the dependency array.",["195"],"'updateDomainEntry' is assigned a value but never used.","'useState' is defined but never used.","'Chip' is defined but never used.","'Domain' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},"Update the dependencies array to be: [id]",{"range":"204","text":"205"},"Update the dependencies array to be: [selectedDomain, domains, selected, nodes, relations, color]",{"range":"206","text":"207"},"Update the dependencies array to be: [props.domain, value]",{"range":"208","text":"209"},"Update the dependencies array to be: [props.domain.id]",{"range":"210","text":"211"},[630,632],"[id]",[13198,13251],"[selectedDomain, domains, selected, nodes, relations, color]",[1848,1862],"[props.domain, value]",[1077,1079],"[props.domain.id]"]