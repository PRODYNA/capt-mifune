name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

env:
  IMAGE_NAME: capt-mifune

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
        env:
          CI: false

      - uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: yarn install
        run: yarn --cwd ui install
      - name: yarn generate api
        run: yarn --cwd ui generate-backend-api
      - name: yarn build
        run: yarn --cwd ui  build
        env:
          CI: false



#
#  # Push image to GitHub Packages.
#  # See also https://docs.docker.com/docker-hub/builds/
#  push:
#    # Ensure test job passes before pushing image.
#    # needs: test
#
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push'
#
#    permissions:
#      contents: read
#      packages: write
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Build image
#        run: docker build . --file Dockerfile --tag $IMAGE_NAME
#
#      - name: Login to harbor
#        uses: docker/login-action@v1
#        with:
#          registry: harbor.prodyna.com
#          username: ${{ secrets.HARBOR_USER }}
#          password: ${{ secrets.HARBOR_PASSWORD }}
#
#      - name: Push image
#        run: |
#          IMAGE_ID=harbor.prodyna.com/capt-mifune/$IMAGE_NAME
#
#          # Change all uppercase to lowercase
#          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#
#          # Strip git ref prefix from version
#          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#
#          # Strip "v" prefix from tag name
#          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
#
#          # Use Docker `latest` tag convention
#          [ "$VERSION" == "master" ] && VERSION=latest
#
#          echo IMAGE_ID=$IMAGE_ID
#          echo VERSION=$VERSION
#
#          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
#          docker push $IMAGE_ID:$VERSION
